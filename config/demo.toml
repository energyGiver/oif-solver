# OIF Solver Configuration - Main File

include = [
    "demo/networks.toml",
    "demo/api.toml",
    "demo/cli.toml",
    "demo/gas.toml",
]

[solver]
id = "oif-solver-demo"
monitoring_timeout_minutes = 5
min_profitability_pct = -1.0

# ============================================================================
# STORAGE
# ============================================================================
[storage]
primary = "file"
cleanup_interval_seconds = 20

[storage.implementations.memory]
# Memory storage has no configuration

[storage.implementations.file]
storage_path = "./data/storage"
ttl_orders = 30                 # 5 minutes
ttl_intents = 30                # 2 minutes
ttl_order_by_tx_hash = 30       # 5 minutes

# ============================================================================
# ACCOUNT
# ============================================================================
[account]
primary = "local"

[account.implementations.local]
# Signet Pecorino Signer Key
# Builder
private_key = "0x16bbae6ef31163943147e8bffe6608493c94d2ae9922488942926a608a0e1930"
# My Custom
# private_key = "0xa233a35a69d1c4e72cf157bf7a1995e62b5a916a7892d0ea2778694f1a2b202e"

# ============================================================================
# DELIVERY
# ============================================================================
[delivery]
min_confirmations = 1

[delivery.implementations.evm_alloy]
network_ids = [31337, 31338]

# Signet Pecorino Bundle Delivery
[delivery.implementations.signet_bundle]
network_ids = [14174, 3151908]                                           # Pecorino Rollup and Host chains
chain_name = "pecorino"
rollup_chain_id = 14174
host_chain_id = 3151908
order_origin_address = "0x000000000000007369676E65742D6f7264657273"
order_destination_address = "0x0A4f505364De0Aa46c66b15aBae44eBa12ab0380"
# Builder
filler_recipient = "0x21c10426fa5101ab80042ac6cf89f65a7d9e7bcb"
# My Custom
# filler_recipient = "0x86973F6C0Ad9D1A1519254f2b89CB341865E8B4E"

# ============================================================================
# DISCOVERY
# ============================================================================
[discovery]

# Disabled local chain discovery (only using Signet)
# [discovery.implementations.onchain_eip7683]
# network_ids = [31337, 31338]
# polling_interval_secs = 0    # Use WebSocket subscriptions instead of polling

# [discovery.implementations.offchain_eip7683]
# api_host = "127.0.0.1"
# api_port = 8081
# network_ids = [31337]

# Signet Pecorino Discovery
[discovery.implementations.signet_cache]
chain_name = "pecorino"
polling_interval_secs = 5
# Builder
whitelist_addresses = ["0x21c10426fa5101ab80042ac6cf89f65a7d9e7bcb"]
# My Custom
# whitelist_addresses = ["0x86973F6C0Ad9D1A1519254f2b89CB341865E8B4E"]

# ============================================================================
# ORDER
# ============================================================================
[order]

[order.implementations.eip7683]

[order.implementations.signet]

[order.strategy]
primary = "simple"

[order.strategy.implementations.simple]
max_gas_price_gwei = 100

# ============================================================================
# PRICING
# ============================================================================
[pricing]
primary = "coingecko"

[pricing.implementations.mock]
# Uses default ETH/USD price of 4615.16

[pricing.implementations.coingecko]
# Free tier configuration (no API key required)
# api_key = "CG-YOUR-API-KEY-HERE"
cache_duration_seconds = 60
rate_limit_delay_ms = 1200

# Custom prices for demo/test tokens (in USD)
[pricing.implementations.coingecko.custom_prices]
TOKA = "200.00"
TOKB = "195.00"

# ============================================================================
# SETTLEMENT
# ============================================================================
[settlement]

[settlement.domain]
chain_id = 1
address = "0x9fE46736679d2D9a65F0992F2272dE9f3c7fa6e0"

[settlement.implementations.direct]
order = ["eip7683", "signet"]                # Support both EIP-7683 and Signet orders
network_ids = [31337, 31338, 14174, 3151908] # Include Signet networks
dispute_period_seconds = 1
# Oracle selection strategy when multiple oracles are available (First, RoundRobin, Random)
oracle_selection_strategy = "First"

# Oracle configuration with multiple oracle support
[settlement.implementations.direct.oracles]
# Input oracles (on origin chains) - including dummy oracles for Signet (bundle delivery handles execution)
input = { 31337 = [
    "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9",
], 31338 = [
    "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9",
], 14174 = [
    "0x000000000000007369676E65742D6f7264657273",
], 3151908 = [
    "0x0A4f505364De0Aa46c66b15aBae44eBa12ab0380",
] }
# Output oracles (on destination chains) - including dummy oracles for Signet (bundle delivery handles execution)
output = { 31337 = [
    "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9",
], 31338 = [
    "0xDc64a140Aa3E981100a9becA4E685f962f0cF6C9",
], 14174 = [
    "0x000000000000007369676E65742D6f7264657273",
], 3151908 = [
    "0x0A4f505364De0Aa46c66b15aBae44eBa12ab0380",
] }

# Valid routes: from origin chain -> to destination chains
[settlement.implementations.direct.routes]
31337 = [31338] # Can go from origin to destination
31338 = [31337] # Can go from destination to origin
# Signet routes (dummy for validation - bundle delivery handles execution)
14174 = [3151908]
3151908 = [14174]

# ============================================================================
# HYPERLANE SETTLEMENT (For cross-chain messaging)
# ============================================================================
[settlement.implementations.hyperlane]
order = "eipXXXX"
network_ids = [31337, 31338]
# Default gas limit for Hyperlane messages
default_gas_limit = 500000
message_timeout_seconds = 600
finalization_required = false # For local testing

# Oracle addresses for Hyperlane (different from direct to avoid conflicts)
# Use a different oracle address to ensure Direct settlement is used for local demo
[settlement.implementations.hyperlane.oracles]
input = { 31337 = [
    "0x0000000000000000000000000000000000000999",
], 31338 = [
    "0x0000000000000000000000000000000000000999",
] }
output = { 31337 = [
    "0x0000000000000000000000000000000000000999",
], 31338 = [
    "0x0000000000000000000000000000000000000999",
] }

[settlement.implementations.hyperlane.routes]
31337 = [31338]
31338 = [31337]

# Mailbox addresses (mock for local testing)
[settlement.implementations.hyperlane.mailboxes]
31337 = "0x0000000000000000000000000000000000000001" # Mock mailbox for local
31338 = "0x0000000000000000000000000000000000000001" # Mock mailbox for local

# IGP addresses (mock for local testing)
[settlement.implementations.hyperlane.igp_addresses]
31337 = "0x0000000000000000000000000000000000000002" # Mock IGP for local
31338 = "0x0000000000000000000000000000000000000002" # Mock IGP for local
